# Copyright (C) 2021 Anthony Harrison
# SPDX-License-Identifier: GPL-3.0-or-later

import json
import re
import xml.etree.ElementTree as ET

import yaml


class SPDXParser:
    def __init__(self):
        pass

    def parse(self, sbomfile):
        """parses SPDX BOM file extracting package name and version"""
        # Supported spdx_type = [".spdx", ".spdx.json", ".spdx.rdf", ".spdx.xml" , ".spdx.yaml", ".spdx.yml" ]
        if sbomfile.endswith(".spdx"):
            return self.parse_spdx_tag(sbomfile)
        elif sbomfile.endswith(".spdx.json"):
            return self.parse_spdx_json(sbomfile)
        elif sbomfile.endswith(".spdx.rdf"):
            return self.parse_spdx_rdf(sbomfile)
        elif sbomfile.endswith(".spdx.xml"):
            return self.parse_spdx_xml(sbomfile)
        elif sbomfile.endswith(".spdx.yaml") or sbomfile.endswith("spdx.yml"):
            return self.parse_spdx_yaml(sbomfile)
        else:
            return []

    def parse_spdx_tag(self, sbomfile):
        """parses SPDX tag value BOM file extracting package name and version"""
        with open(sbomfile, "r") as f:
            lines = f.readlines()
        modules = []
        for line in lines:
            l = line.split(":")
            if l[0] == "PackageName":
                package = l[1].strip().rstrip("\n")
                version = None
            if l[0] == "PackageVersion":
                version = l[1].strip().rstrip("\n")
                version = version.split("-")[0]
                version = version.split("+")[0]
                modules.append(self.save_module(package, version))

        return modules

    def parse_spdx_json(self, sbomfile):
        """parses SPDX JSON BOM file extracting package name and version"""
        data = json.load(open(sbomfile))
        modules = []
        for d in data["packages"]:
            package = d["name"]
            try:
                version = d["versionInfo"]
                modules.append(self.save_module(package, version))
            except:
                pass

        return modules

    def parse_spdx_rdf(self, sbomfile):
        """parses SPDX RDF BOM file extracting package name and version"""
        with open(sbomfile, "r") as f:
            lines = f.readlines()
        modules = []
        for line in lines:
            if line.strip().startswith("<spdx:name>"):
                package = re.search(
                    "<spdx:name>(.+?)</spdx:name>", line.strip().rstrip("\n")
                ).group(1)
                version = None
            if line.strip().startswith("<spdx:versionInfo>"):
                version = re.search(
                    "<spdx:versionInfo>(.+?)</spdx:versionInfo>",
                    line.strip().rstrip("\n"),
                ).group(1)
                modules.append(self.save_module(package, version))

        return modules

    def parse_spdx_yaml(self, sbomfile):
        """parses SPDX YAML BOM file extracting package name and version"""
        data = yaml.safe_load(open(sbomfile))

        modules = []
        for d in data["packages"]:
            package = d["name"]
            try:
                version = d["versionInfo"]
                modules.append(self.save_module(package, version))
            except:
                pass

        return modules

    def parse_spdx_xml(self, sbomfile):
        """parses SPDX XML BOM file extracting package name and version"""
        # XML is experimental in SPDX 2.2
        tree = ET.parse(sbomfile)
        # Find root element
        root = tree.getroot()
        # Extract schema
        schema = root.tag[: root.tag.find("}") + 1]
        modules = []
        for component in root.findall(schema + "packages"):
            package = component.find(schema + "name").text
            try:
                version = component.find(schema + "versionInfo").text
                modules.append(self.save_module(package, version))
            except:
                pass

        return modules

    def save_module(self, package, version):
        return [package, version]


if __name__ == "__main__":
    import sys

    spdx = SPDXParser()
    file = sys.argv[1]
    # spdx.parse_TAG(file)
    # print(spdx.parse_sbom(file))
    # spdx.parse_spdx_tag(file)
    # spdx.parse_spdx_rdf(file)
    # spdx.parse_spdx_json(file)
    # spdx.parse_spdx_yaml(file)
    spdx.parse_spdx_xml(file)
    print("And again....")
    # Should get same results....
    spdx.parse(file)
